
KEYWORD[2:1]: program
IDENTIFIER[2:9]: lexicaltokens
PUNCTUATION[2:22]: ;

KEYWORD[4:1]: var

IDENTIFIER[5:3]: x
PUNCTUATION[5:4]: ,
IDENTIFIER[5:6]: y
PUNCTUATION[5:7]: :
KEYWORD[5:9]: integer
PUNCTUATION[5:16]: ;

IDENTIFIER[6:3]: z
PUNCTUATION[6:4]: :
KEYWORD[6:6]: real
PUNCTUATION[6:10]: ;

KEYWORD[8:1]: begin

IDENTIFIER[9:3]: x
PUNCTUATION[9:5]: :=
INTEGER_LIT[9:8]: 10
PUNCTUATION[9:10]: ;
COMMENT[9:12]: { Assign 10 to variable x }

IDENTIFIER[10:3]: y
PUNCTUATION[10:5]: :=
INTEGER_LIT[10:8]: 20
PUNCTUATION[10:10]: ;
COMMENT[10:12]: { Assign 20 to variable y }

IDENTIFIER[11:3]: z
PUNCTUATION[11:5]: :=
REAL_LIT[11:8]: 3.14
PUNCTUATION[11:12]: ;
COMMENT[11:14]: { Assign 3.14 to variable z }

KEYWORD[13:3]: writeln
PUNCTUATION[13:10]: (
STRING_LIT[13:11]: 'Sum:'
PUNCTUATION[13:17]: ,
IDENTIFIER[13:19]: x
OPERATOR[13:21]: +
IDENTIFIER[13:23]: y
PUNCTUATION[13:24]: )
PUNCTUATION[13:25]: ;
COMMENT[13:27]: { Display the sum of x and y }

KEYWORD[14:3]: writeln
PUNCTUATION[14:10]: (
STRING_LIT[14:11]: 'Product:'
PUNCTUATION[14:21]: ,
IDENTIFIER[14:23]: x
OPERATOR[14:25]: *
IDENTIFIER[14:27]: y
PUNCTUATION[14:28]: )
PUNCTUATION[14:29]: ;
COMMENT[14:31]: { Display the product of x and y }

KEYWORD[15:3]: writeln
PUNCTUATION[15:10]: (
STRING_LIT[15:11]: 'Pi:'
PUNCTUATION[15:16]: ,
IDENTIFIER[15:18]: z
PUNCTUATION[15:19]: )
PUNCTUATION[15:20]: ;
COMMENT[15:22]: { Display the value of z }

KEYWORD[17:3]: if
IDENTIFIER[17:6]: x
OPERATOR[17:8]: >
IDENTIFIER[17:10]: y
KEYWORD[17:12]: then
COMMENT[17:17]: { Check if x is greater than y }

KEYWORD[18:5]: writeln
PUNCTUATION[18:12]: (
STRING_LIT[18:13]: 'x is greater than y'
PUNCTUATION[18:34]: )

KEYWORD[19:3]: else

KEYWORD[20:5]: writeln
PUNCTUATION[20:12]: (
STRING_LIT[20:13]: 'y is greater than or equal to x'
PUNCTUATION[20:46]: )
PUNCTUATION[20:47]: ;

KEYWORD[22:3]: for
IDENTIFIER[22:7]: x
PUNCTUATION[22:9]: :=
INTEGER_LIT[22:12]: 1
KEYWORD[22:14]: to
INTEGER_LIT[22:17]: 5
KEYWORD[22:19]: do
COMMENT[22:22]: { Loop from 1 to 5 }

KEYWORD[23:5]: writeln
PUNCTUATION[23:12]: (
STRING_LIT[23:13]: 'Current value of x:'
PUNCTUATION[23:34]: ,
IDENTIFIER[23:36]: x
PUNCTUATION[23:37]: )
PUNCTUATION[23:38]: ;

KEYWORD[25:3]: case
IDENTIFIER[25:8]: x
KEYWORD[25:10]: of
COMMENT[25:13]: { Select a case based on the value of x }

INTEGER_LIT[26:5]: 1
PUNCTUATION[26:6]: :
KEYWORD[26:8]: writeln
PUNCTUATION[26:15]: (
STRING_LIT[26:16]: 'x is 1'
PUNCTUATION[26:24]: )
PUNCTUATION[26:25]: ;

INTEGER_LIT[27:5]: 2
PUNCTUATION[27:6]: :
KEYWORD[27:8]: writeln
PUNCTUATION[27:15]: (
STRING_LIT[27:16]: 'x is 2'
PUNCTUATION[27:24]: )
PUNCTUATION[27:25]: ;

INTEGER_LIT[28:5]: 3
PUNCTUATION[28:6]: :
KEYWORD[28:8]: writeln
PUNCTUATION[28:15]: (
STRING_LIT[28:16]: 'x is 3'
PUNCTUATION[28:24]: )
PUNCTUATION[28:25]: ;

KEYWORD[29:3]: else

KEYWORD[30:5]: writeln
PUNCTUATION[30:12]: (
STRING_LIT[30:13]: 'x is not 1, 2, or 3'
PUNCTUATION[30:34]: )
PUNCTUATION[30:35]: ;

KEYWORD[31:3]: end
PUNCTUATION[31:6]: ;

KEYWORD[33:3]: repeat
COMMENT[33:10]: { Repeat a block of code until a condition is met }

IDENTIFIER[34:5]: x
PUNCTUATION[34:7]: :=
IDENTIFIER[34:10]: x
OPERATOR[34:12]: -
INTEGER_LIT[34:14]: 1
PUNCTUATION[34:15]: ;

KEYWORD[35:5]: writeln
PUNCTUATION[35:12]: (
STRING_LIT[35:13]: 'Current value of x:'
PUNCTUATION[35:34]: ,
IDENTIFIER[35:36]: x
PUNCTUATION[35:37]: )
PUNCTUATION[35:38]: ;

KEYWORD[36:3]: until
IDENTIFIER[36:9]: x
OPERATOR[36:11]: =
INTEGER_LIT[36:13]: 0
PUNCTUATION[36:14]: ;

KEYWORD[38:1]: end
PUNCTUATION[38:4]: .
